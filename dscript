#!/bin/python3
from pathlib import Path
from collections import defaultdict
from py.lex import lexer, instruction, register
from argparse import ArgumentParser
from sys import argv

binary_instructions = (
    'ADD',
    'SUB',
    'MUL',
    'DIV',
    'OR',
    'AND',
    'XOR',
    'CMP',
)

unary_instructions = (
    'NOT',
    'JZE',
    'JNZ',
)

meta_instructions = (
    'CALL',
)

special_instructions = (
    'NOP',
    'SYSCALL',
)

jump_types = (
    'JZE',
    'JNZ',
    'CALL'
)

arg_types = (
    'REGISTER',
    'IMMEDIATE',
    'REFERENCE',
    'OFFSET',
)

pc = 0
labels = {}
data = {}
pending_references = defaultdict(list)
ireg = ('ai', 'bi', 'ci')
ireg_idx = 0
main_found = False
token = None

def parse_error(sym, msg):
    print(f'{argv[0]}: syntax error (line {token.lexer.lineno}): {sym}: ' + msg)
    exit(1)

def lex():
    global token
    if token and args.verbose:
        print(f'{token.type:9}: {token.value}')
    token = lexer.token()

def document():
    global pc
    if not token:
        return False
    if token.type == 'NEWLINE':
        lex()
    while token:
        while label():
            pass
        stmt()
        pc += 1
    return True

def label():
    global main_found
    if token.type != 'LABEL':
        return False
    name = token.value
    lex()
    if token.type in ('VALUE', 'STRING'):
        data.update({name: token.value})
        lex()
    else:
        labels.update({name: pc})
        if name == 'MAIN':
            main_found = True
    if token.type != 'NEWLINE':
        parse_error('label', 'malformed label declaration. expected a newline')
    lex()
    return True

def stmt():
    if not token.type in instruction:
        parse_error('statement', f'expected instruction, got token of type {token.type}')
    if not (
        binary_stmt()
        or unary_stmt()
        or meta_stmt()
        or special_stmt()
    ):
        parse_error('statement', f'instruction `{token.value.lower()}` not implemented')
    if token.type != 'NEWLINE':
        parse_error('statement', 'malformed statement. expected a newline')
    mem.write('\n')
    lex()
    return True

def special_stmt():
    if not token.type in special_instructions:
        return False
    ins = token.type
    ins_code = token.value
    lex()
    if token.type == 'COMMA':
        parse_error(f'special statement ({ins.lower()})', 'unexpected comma')
    if arg():
        parse_error(f'special statement ({ins.lower()})', f'unexpected argument `{token.name}`')
    mem.write(ins_code)
    mem.write(3*register['0'])
    mem.write(' // ' + ins)
    return True

def binary_stmt():
    if not token.type in binary_instructions:
        return False
    ins = token.type
    ins_code = token.value
    arg_code = ''
    lex()
    if token.type == 'COMMA':
        parse_error(f'binary statement ({ins.lower()})', 'unexpected comma')
    for i in range(3):
        if not arg():
            if token.type != 'NEWLINE':
                parse_error(f'binary statement ({ins.lower()})', f'unknown argument `{token.name}`')
            else:
                token.lexer.lineno -= 1
                parse_error(f'binary statement ({ins.lower()})', 'missing argument')
        arg_code += token.value
        lex()
        if token.type == 'COMMA':
            lex()
            if i == 2 and arg():
                parse_error(f'binary statement ({ins.lower()})', f'trailing argument `{token.name}`')
        elif i != 2:
            parse_error(f'binary statement ({ins.lower()})', 'malformed argument. expected comma')
    mem.write(ins_code)
    mem.write(arg_code)
    mem.write(' // ' + ins)
    return True

def unary_stmt():
    if not token.type in unary_instructions:
        return False
    ins = token.type
    ins_code = token.value
    arg_code = ''
    lex()
    if token.type == 'COMMA':
        parse_error(f'unary statement ({ins.lower()})', 'unexpected comma')
    for i in range(2):
        if not arg():
            if token.type != 'NEWLINE':
                parse_error(f'unary statement ({ins.lower()})', f'unknown argument `{token.name}`')
            else:
                token.lexer.lineno -= 1
                parse_error(f'unary statement ({ins.lower()})', 'missing argument')
        arg_code += token.value
        lex()
        if token.type == 'COMMA':
            lex()
            if i == 1 and arg():
                parse_error(f'unary statement ({ins.lower()})', f'trailing argument `{token.name}`')
        elif i != 1:
            parse_error(f'unary statement ({ins.lower()})', 'malformed argument. expected comma')
    mem.write(ins_code)
    if ins in jump_types:
        mem.write(register['pc'])
        mem.write(arg_code)
    else:
        mem.write(arg_code)
        mem.write(register['0'])
    mem.write(' // ' + ins)
    return True

def meta_stmt():
    if not token.type in meta_instructions:
        return False
    ins = token.type
    ins_code = token.value
    lex()
    if token.type == 'COMMA':
        parse_error(f'meta statement ({ins.lower()})', 'unexpected comma')
    if not arg():
        parse_error(f'meta statement ({ins.lower()})', 'missing argument')
    arg_code = token.value
    lex()
    if token.type == 'COMMA':
        lex()
        if arg():
            parse_error(f'meta statement ({ins.lower()})', f'trailing argument `{token.name}`')
        else:
            parse_error(f'meta statement ({ins.lower()})', 'unexpected comma')
    mem.write(ins_code)
    if ins in jump_types:
        mem.write(register['pc'])
        mem.write(arg_code)
        mem.write(register['0'])
    else:
        mem.write(arg_code)
        mem.write(2*register['0'])
    mem.write(' // ' + ins)
    return True

def arg():
    'NOTE: does not call lex()'
    global ireg_idx, pc
    if not token.type in arg_types:
        return False
    if token.type == 'IMMEDIATE':
        load_value(ireg[ireg_idx], token.value)
    elif token.type == 'REFERENCE':
        if not token.value in labels:
            pending_references[token.value].append((mem.tell(), ireg_idx))
            for _ in range(2):
                mem.write(instruction['NOP'])
                mem.write(3*register['0'])
                mem.write(' // NOP\n')
                pc += 1
        else:
            load_value(ireg[ireg_idx], labels[token.value])
    elif token.type == 'OFFSET':
        load_value(ireg[ireg_idx], token.offset)
        mem.write(instruction['ADD'])
        mem.write(2*register[ireg[ireg_idx]])
        mem.write(token.value)
        mem.write(' // ADD\n')
        pc += 1
    if token.type != 'REGISTER':
        token.value = register[ireg[ireg_idx]]
        ireg_idx = (ireg_idx + 1) % len(ireg)
    return True

def binary_string(value):
    if value < 0:
        value += 2**16
    binary = bin(value)[2:]
    if len(binary) > 16:
        parse_error('immediate', 'value exceeds 16-bit maximum')
    upper = (len(binary) > 8)
    return '0'*(16 - len(binary)) + binary, upper

def load_value(reg, value, increment_pc=True):
    global pc
    binary, upper = binary_string(value)

    mem.write(instruction['MLO'])
    mem.write(register[reg])
    mem.write(binary[8:])
    mem.write(' // MLO\n')
    if increment_pc:
        pc += 1

    if upper:
        mem.write(instruction['MHI'])
        mem.write(register[reg])
        mem.write(binary[:8])
        mem.write(' // MHI\n')
        if increment_pc:
            pc += 1

if __name__ == '__main__':
    parser = ArgumentParser(
        prog='dscript',
        description='Assemble a doomscript file.'
    )
    parser.add_argument('-o', '--output', metavar='*.mem', type=str,
                        default='doom.mem', help='output file name for memory')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='show debugging messages')
    parser.add_argument('file', type=str, help='input file name')

    args = parser.parse_args()

    with open(Path(args.output), 'w') as mem:
        lexer.input(open(Path(args.file)).read())
        lex()
        load_value(ireg[-2], -1)
        mem.write(instruction['OR'])
        mem.write(register['bp'])
        mem.write(register[ireg[-2]])
        mem.write(register['0'])
        mem.write(' // OR\n')
        pending_references['MAIN'].append((mem.tell(), -1))
        for _ in range(2):
            mem.write(instruction['NOP'])
            mem.write(3*register['0'])
            mem.write(' // NOP\n')
        mem.write(instruction['JZE'])
        mem.write(register['pc'])
        mem.write(register[ireg[-1]])
        mem.write(register['0'])
        mem.write(' // JZE\n')
        pc += 4

        document()

        if not main_found:
            print(f'{argv[0]}: label MAIN missing')
            exit(1)

        for label in labels:
            if label in pending_references:
                pends = pending_references.pop(label)
                for pend in pends:
                    mem.seek(pend[0], 0)
                    load_value(ireg[pend[1]], labels[label], increment_pc=False)

        data_printed = defaultdict(bool)
        data_addr = defaultdict(lambda: pc)
        for label in data:
            if label in pending_references:
                mem.seek(0, 2)
                value = data[label]
                addr = data_addr[label]
                if isinstance(value, str):
                    if not data_printed[label]:
                        for c in value:
                            mem.write(binary_string(ord(c))[0])
                            mem.write(f' // {label} ({c})\n')
                            pc += 1
                        mem.write(binary_string(0)[0])
                        mem.write(f' // {label} (\\0)\n')
                        pc += 1
                    value = addr
                    data_printed[label] = True
                pends = pending_references.pop(label)
                for pend in pends:
                    mem.seek(pend[0], 0)
                    load_value(ireg[pend[1]], value, increment_pc=False)

        if pending_references:
            label = list(pending_references.keys())[0]
            print(f'{argv[0]}: undefined label `{label}`')
            exit(1)

        mem.seek(0, 2)
        for _ in range(2**16-pc):
            mem.write(instruction['NOP'])
            mem.write(3*register['0'])
            mem.write(' // NOP\n')
